#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define EXT  1
#define NAV  2
#define FUN  3
#define ADJ  4// macros definition
#define undo LC(Z)
#define redo LC(LS(Z))
#define prev_screen LC(LG(LEFT))
#define next_screen LC(LG(RIGHT))
#define meh LC(LS(LALT))
#define prev_win LA(TAB)
#define next_win LA(LS(TAB))
#define deg RA(LS(SEMI))// tune mod tap
#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

// caps word settings

&caps_word {
    continue-list = <UNDERSCORE MINUS N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

// main tree

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NAV FUN>;
            then-layer = <ADJ>;
        };
    };

    behaviors {
        // HOME ROW MODS

        hml: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;// <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <0>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;// <---[[right-hand keys]]
        };
        hmr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;// <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <0>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;// <---[[right-hand keys]]
        };
        mo_kp: behavior_mo_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_kp";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        osm: one_shot_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "ONE_SHOT_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;// <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings =
                <&sk>,
                <&kp>;
        };

        // TAP DANCES

        spacetab: tap_dance_space_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SPACE_TAB";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp SPACE>,
                <&kp TAB>;
        };
        grvtilde: tap_dance_grave_tilde {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_GRAVE_TILDE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp GRAVE>,
                <&kp TILDE>;
        };
        apoquote: tap_dance_apostrophe_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_APOSTROPE_QUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp SQT>,
                <&kp DQT>;
        };
        eurodollar: tap_dance_euro_dollar {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EURO_DOLLAR";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp RA(N5)>,
                <&kp DLLR>;
        };
        close: tap_dance_close {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CLOSE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp LC(F4)>,
                <&kp LA(F4)>;
        };
    };

    // macros

    macros {
        sel_word: select_word {
            label = "ZM_SELECT_WORD";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LSHFT &kp LCTRL>;
        };
    };

    // combos for accents dead keys (for US_intl_altgr_deadkeys OS layout)

    combos {
        compatible = "zmk,combos";

        combo_acc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            layers = <0>;
            bindings = <&kp RA(SINGLE_QUOTE)>;
        };

        combo_grv {
            timeout-ms = <50>;
            key-positions = <2 3>;
            layers = <0>;
            bindings = <&kp RA(GRAVE)>;
        };

        combo_delwrd {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <8 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ----------------------------------------------------------------------------------------------------------------------------
            // |    Q    |    W    |    E    |    R    |    T    |                      |    Y    |    U    |    I    |    O    |    P    |
            // |    A    |    S    |    D    |    F    |    G    |                      |    H    |    J    |    K    |    L    |    :    |
            // |    Z    |    X    |    C    |    V    |    B    |                      |    N    |    M    |    ,    |    .    |    /    |
            //                               |   ESC   |  SPACE  |   TAB   |  |  BACKSPACE |ENTER|   DEL   |

            bindings = <
  &kp Q     &kp W           &kp E         &kp R          &kp T              &kp Y           &kp U           &kp I           &kp O               &kp P
  &kp A     &hml LALT S     &hml LCTRL D  &mo_kp 1 F     &hml LEFT_GUI G    &hmr RGUI H     &mo_kp 1 J      &hmr RCTRL K    &hmr RALT L         &kp COLON
  &kp Z     &kp X           &kp C         &kp V          &kp B              &kp N           &kp M           &kp COMMA       &kp DOT             &kp SLASH
                            &kp ESC       &spacetab      &mo_kp 2 ESC          &kp BACKSPACE   &kp ENTER       &kp DEL
            >;
        };

        num_layer {
            bindings = <
  &none   AS(N7)    AS(N8)   AS(N9)     &none           &none   &kp LPAR     &kp RPAR     &kp EQUAL     &kp BACKSLASH 
  &none   AS(N4)    AS(N5)   AS(N6)     &none           &none   &kp LBKT     &kp RBKT     &kp MINUS     &kp SEMICOLON 
  &none   AS(N1)    AS(N2)   AS(N3)     &none           &none   &kp GRAVE    &kp COMMA    &kp DOT       &kp SLASH 
                    &none    &none      AS(N0)          &kp DEL &none        &none
            >;
        };

        nav_layer {
            bindings = <
  &none         &none       &none       &none       &none       &none       &none       &none       &none       &none
  &none         &none       &none       &none       &none       &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &none
  &none         &none       &none       &none       &none       &none       &none       &none       &none       &none
                            &none       &none       &mo 3       &trans      &none       &none
            >;
        };

        fun_layer {
            bindings = <
  &none  &kp F7  &kp F8  &kp F9  &kp F10  &kp C_VOL_UP    &kp C_PREVIOUS    &kp C_NEXT       &none   &kp C_BRI_UP
  &none  &kp F4  &kp F5  &kp F6  &kp F11  &kp C_VOL_DN  &kp C_PLAY_PAUSE         &none       &none   &kp C_BRI_DN
  &none  &kp F1  &kp F2  &kp F3  &kp F12  &bt BT_SEL 0      &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &kp C_BRI_MIN
                  &none   &none   &trans        &trans             &none         &none
            >;
        };
    };
};
