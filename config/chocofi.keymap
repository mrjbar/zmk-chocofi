#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define SYM  1
#define NUM  2
#define NAV  3
#define FUN  4
#define ADJ  5// macros definition
#define undo LC(Z)
#define redo LC(LS(Z))
#define prev_screen LC(LG(LEFT))
#define next_screen LC(LG(RIGHT))
#define meh LC(LS(LALT))
#define prev_win LA(TAB)
#define next_win LA(LS(TAB))
#define deg RA(LS(SEMI))// tune mod tap
#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

// caps word settings

&caps_word {
    continue-list = <UNDERSCORE MINUS N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

// main tree

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NAV FUN>;
            then-layer = <ADJ>;
        };
    };

    behaviors {
        // HOME ROW MODS

        hml: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;// <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;// <---[[right-hand keys]]
        };
        hmr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;// <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;// <---[[right-hand keys]]
        };
        mo_kp: behavior_mo_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_kp";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        osm: one_shot_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "ONE_SHOT_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;// <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings =
                <&sk>,
                <&kp>;
        };

        // TAP DANCES

        spacetab: tap_dance_space_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SPACE_TAB";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings =
                <&kp SPACE>,
                <&kp TAB>;
        };
        grvtilde: tap_dance_grave_tilde {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_GRAVE_TILDE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp GRAVE>,
                <&kp TILDE>;
        };
        apoquote: tap_dance_apostrophe_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_APOSTROPE_QUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp SQT>,
                <&kp DQT>;
        };
        eurodollar: tap_dance_euro_dollar {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EURO_DOLLAR";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp RA(N5)>,
                <&kp DLLR>;
        };
        close: tap_dance_close {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CLOSE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp LC(F4)>,
                <&kp LA(F4)>;
        };
    };

    // macros

    macros {
        nav_outlook: nav_outlook {
            label = "NAV_OUTLOOK";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_tap &kp LG(SPACE)>,
                <&macro_tap &kp O &kp U &kp T &kp L &kp O &kp O &kp K &kp DOT &kp A &kp P &kp P>,
                <&macro_tap &kp ENTER>;
        };
        nav_slack: nav_slack {
            label = "NAV_SLACK";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_tap &kp LG(SPACE)>,
                <&macro_tap &kp S &kp L &kp A &kp C &kp K &kp DOT &kp A &kp P &kp P>,
                <&macro_tap &kp ENTER>;
        };
        nav_iterm: nav_iterm {
            label = "NAV_ITERM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_tap &kp LG(SPACE)>,
                <&macro_tap &kp I &kp T &kp E &kp R &kp M &kp DOT &kp A &kp P &kp P>,
                <&macro_tap &kp ENTER>;
        };
        nav_firefox: nav_firefox {
            label = "NAV_FIREFOX";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_tap &kp LG(SPACE)>,
                <&macro_tap &kp F &kp I &kp R &kp E &kp F &kp O &kp X &kp DOT &kp A &kp P &kp P>,
                <&macro_tap &kp ENTER>;
        };
        nav_lens: nav_lens {
            label = "NAV_LENS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_tap &kp LG(SPACE)>,
                <&macro_tap &kp L &kp E &kp N &kp S>,
                <&macro_tap &kp ENTER>;
        };
        find_file: find_file {
            label = "FUZZY_FIND_FILE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp SPACE &kp F &kp F>;
        };
        grep_file: grep_file {
            label = "FUZZY_GREP_FILE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp SPACE &kp F &kp G>;
        };
        buffered_file: buffered_file {
            label = "FUZZY_BUFFERED_FILE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp SPACE &kp F &kp B>;
        };
    };

    // combos for accents dead keys (for US_intl_altgr_deadkeys OS layout)

    combos {
        compatible = "zmk,combos";

        combo_quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <18 19>;
        };

        combo_grv {
            timeout-ms = <50>;
            key-positions = <2 3>;
            layers = <0>;
            bindings = <&kp RA(GRAVE)>;
        };

        combo_delwrd {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <8 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "BASE";
            bindings = <
  &kp Q            &kp W           &kp E         &kp R            &kp T              &kp Y           &kp U           &kp I           &kp O               &kp P
  &hml LEFT_GUI A            &hml LALT S     &hml LCTRL D  &hml LSHIFT F     &hml LEFT_GUI G    &hmr RGUI H     &hmr RSHIFT J    &hmr RCTRL K    &hmr RALT L         &hmr RIGHT_GUI COLON
  &hml LG(Z) Z     &hml LG(X) X    &hml LG(C) C  &hml LG(V) V     &kp B              &kp N           &kp M           &kp COMMA       &kp DOT             &kp SLASH
                                   &sk LSHIFT    &spacetab        &mo_kp NAV ESC     &mo_kp SYM BACKSPACE   &mo_kp NUM ENTER       &mo_kp FUN DEL
            >;
        };

        sym_layer {
            label = "SYM";
            bindings = <
  &kp LBRC   &kp AMPS  &kp STAR  &kp LPAR   &kp RBRC           &none   &kp LPAR       &kp RPAR     AS(EQUAL)     AS(BACKSLASH) 
  &kp APOS  &kp DLLR  &kp PRCNT &kp CARET  &kp PLUS            AS(APOS)   AS(LBKT)    AS(RBKT)     AS(MINUS)     &kp SEMICOLON 
  &kp TILDE  &kp EXCL  &kp AT    &kp HASH   &kp BACKSLASH      &none   AS(GRAVE)      &kp COMMA    &kp DOT       &kp SLASH 
                       &kp LPAR  &kp RPAR   &kp UNDER          &none   &none          &none
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
  &kp LBKT        &kp N7     &kp N8     &kp N9     &kp RBKT             &none   &none       &none         &none        &none 
  &kp DQT         &kp N4     &kp N5     &kp N6     &kp EQUAL            &none   &none       &kp RCTRL     &kp RALT     &kp RIGHT_GUI
  &kp GRAVE       &kp N1     &kp N2     &kp N3     &kp PIPE            &none   &none       &none         &none        &none 
                  &none    &kp N0     &kp MINUS                         &none   &none       &none
            >;
        };

        nav_layer {
            label = "NAV";
            bindings = <
  &none         &kp LC(N1)      &kp LC(N2)      &kp LC(N3)          &kp LG(LS(LC(N4)))          &caps_word     &kp PAGE_DOWN    &kp PAGE_UP      &none       &none
  &nav_outlook  &nav_slack      &nav_iterm      &nav_firefox        &nav_lens                   &kp LEFT       &kp DOWN         &kp UP           &kp RIGHT   &none 
  &none         &buffered_file  &grep_file      &find_file          &kp LG(LS(N4))                  &none          &kp END          &kp HOME         &none       &none
                            &none       &none       &mo 3       &trans      &none               &none
            >;
        };

        fun_layer {
            label = "FUN";
            bindings = <
  &kp F12  &kp F7  &kp F8  &kp F9  &kp C_VOL_UP                  &none    &none    &none  &kp C_BRI_UP    &bt BT_SEL 0
  &kp F11  &kp F4  &kp F5  &kp F6  &kp C_VOL_DN                  &none    &none    &none  &kp C_BRI_DN    &bt BT_SEL 1
  &kp F10  &kp F1  &kp F2  &kp F3  &kp C_MUTE                    &none    &none    &none  &kp C_BRI_MIN   &bt BT_CLR
                  &kp C_PREVIOUS   &kp C_PLAY_PAUSE   &kp C_NEXT                  &trans            &none           &none
            >;
        };
    };
};
